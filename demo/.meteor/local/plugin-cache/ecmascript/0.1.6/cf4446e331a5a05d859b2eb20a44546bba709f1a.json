{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"// Define some variables used to remember state.\nvar playlistId, nextPageToken, prevPageToken;\n\n// After the API loads, call a function to get the uploads playlist ID.\nfunction handleAPILoaded() {\n    requestUserUploadsPlaylistId();\n}\n\n// Call the Data API to retrieve the playlist ID that uniquely identifies the\n// list of videos uploaded to the currently authenticated user's channel.\nfunction requestUserUploadsPlaylistId() {\n    // See https://developers.google.com/youtube/v3/docs/channels/list\n    var request = gapi.client.youtube.channels.list({\n        mine: true,\n        part: 'contentDetails'\n    });\n    request.execute(function (response) {\n        playlistId = response.result.items[0].contentDetails.relatedPlaylists.uploads;\n        requestVideoPlaylist(playlistId);\n    });\n}\n\n// Retrieve the list of videos in the specified playlist.\nfunction requestVideoPlaylist(playlistId, pageToken) {\n    $('#video-container').html('');\n    var requestOptions = {\n        playlistId: playlistId,\n        part: 'snippet',\n        maxResults: 10\n    };\n    if (pageToken) {\n        requestOptions.pageToken = pageToken;\n    }\n    var request = gapi.client.youtube.playlistItems.list(requestOptions);\n    request.execute(function (response) {\n        // Only show pagination buttons if there is a pagination token for the\n        // next or previous page of results.\n        nextPageToken = response.result.nextPageToken;\n        var nextVis = nextPageToken ? 'visible' : 'hidden';\n        $('#next-button').css('visibility', nextVis);\n        prevPageToken = response.result.prevPageToken;\n        var prevVis = prevPageToken ? 'visible' : 'hidden';\n        $('#prev-button').css('visibility', prevVis);\n\n        var playlistItems = response.result.items;\n        if (playlistItems) {\n            $.each(playlistItems, function (index, item) {\n                displayResult(item.snippet);\n            });\n        } else {\n            $('#video-container').html('Sorry you have no uploaded videos');\n        }\n    });\n}\n\n// Create a listing for a video.\nfunction displayResult(videoSnippet) {\n    var title = videoSnippet.title;\n    var videoId = videoSnippet.resourceId.videoId;\n    $('#video-container').append('<p>' + title + ' - ' + videoId + '</p>');\n}\n\n// Retrieve the next page of videos in the playlist.\nfunction nextPage() {\n    requestVideoPlaylist(playlistId, nextPageToken);\n}\n\n// Retrieve the previous page of videos in the playlist.\nfunction previousPage() {\n    requestVideoPlaylist(playlistId, prevPageToken);\n}","ast":null,"map":{"version":3,"sources":["/my_uploads.js"],"names":[],"mappings":";AACA,IAAI,UAAU,EAAE,aAAa,EAAE,aAAa,CAAC;;;AAG7C,SAAS,eAAe,GAAG;AACvB,gCAA4B,EAAE,CAAC;CAClC;;;;AAID,SAAS,4BAA4B,GAAG;;AAEpC,QAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;AAC5C,YAAI,EAAE,IAAI;AACV,YAAI,EAAE,gBAAgB;KACzB,CAAC,CAAC;AACH,WAAO,CAAC,OAAO,CAAC,UAAS,QAAQ,EAAE;AAC/B,kBAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,gBAAgB,CAAC,OAAO,CAAC;AAC9E,4BAAoB,CAAC,UAAU,CAAC,CAAC;KACpC,CAAC,CAAC;CACN;;;AAGD,SAAS,oBAAoB,CAAC,UAAU,EAAE,SAAS,EAAE;AACjD,KAAC,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC/B,QAAI,cAAc,GAAG;AACjB,kBAAU,EAAE,UAAU;AACtB,YAAI,EAAE,SAAS;AACf,kBAAU,EAAE,EAAE;KACjB,CAAC;AACF,QAAI,SAAS,EAAE;AACX,sBAAc,CAAC,SAAS,GAAG,SAAS,CAAC;KACxC;AACD,QAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AACrE,WAAO,CAAC,OAAO,CAAC,UAAS,QAAQ,EAAE;;;AAG/B,qBAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC;AAC9C,YAAI,OAAO,GAAG,aAAa,GAAG,SAAS,GAAG,QAAQ,CAAC;AACnD,SAAC,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;AAC7C,qBAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAA;AAC7C,YAAI,OAAO,GAAG,aAAa,GAAG,SAAS,GAAG,QAAQ,CAAC;AACnD,SAAC,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;;AAE7C,YAAI,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC;AAC1C,YAAI,aAAa,EAAE;AACf,aAAC,CAAC,IAAI,CAAC,aAAa,EAAE,UAAS,KAAK,EAAE,IAAI,EAAE;AACxC,6BAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC/B,CAAC,CAAC;SACN,MAAM;AACH,aAAC,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;SACnE;KACJ,CAAC,CAAC;CACN;;;AAGD,SAAS,aAAa,CAAC,YAAY,EAAE;AACjC,QAAI,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;AAC/B,QAAI,OAAO,GAAG,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC;AAC9C,KAAC,CAAC,kBAAkB,CAAC,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,MAAM,CAAC,CAAC;CAC1E;;;AAGD,SAAS,QAAQ,GAAG;AAChB,wBAAoB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;CACnD;;;AAGD,SAAS,YAAY,GAAG;AACpB,wBAAoB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;CACnD","file":"/my_uploads.js.map","sourcesContent":["// Define some variables used to remember state.\r\nvar playlistId, nextPageToken, prevPageToken;\r\n\r\n// After the API loads, call a function to get the uploads playlist ID.\r\nfunction handleAPILoaded() {\r\n    requestUserUploadsPlaylistId();\r\n}\r\n\r\n// Call the Data API to retrieve the playlist ID that uniquely identifies the\r\n// list of videos uploaded to the currently authenticated user's channel.\r\nfunction requestUserUploadsPlaylistId() {\r\n    // See https://developers.google.com/youtube/v3/docs/channels/list\r\n    var request = gapi.client.youtube.channels.list({\r\n        mine: true,\r\n        part: 'contentDetails'\r\n    });\r\n    request.execute(function(response) {\r\n        playlistId = response.result.items[0].contentDetails.relatedPlaylists.uploads;\r\n        requestVideoPlaylist(playlistId);\r\n    });\r\n}\r\n\r\n// Retrieve the list of videos in the specified playlist.\r\nfunction requestVideoPlaylist(playlistId, pageToken) {\r\n    $('#video-container').html('');\r\n    var requestOptions = {\r\n        playlistId: playlistId,\r\n        part: 'snippet',\r\n        maxResults: 10\r\n    };\r\n    if (pageToken) {\r\n        requestOptions.pageToken = pageToken;\r\n    }\r\n    var request = gapi.client.youtube.playlistItems.list(requestOptions);\r\n    request.execute(function(response) {\r\n        // Only show pagination buttons if there is a pagination token for the\r\n        // next or previous page of results.\r\n        nextPageToken = response.result.nextPageToken;\r\n        var nextVis = nextPageToken ? 'visible' : 'hidden';\r\n        $('#next-button').css('visibility', nextVis);\r\n        prevPageToken = response.result.prevPageToken\r\n        var prevVis = prevPageToken ? 'visible' : 'hidden';\r\n        $('#prev-button').css('visibility', prevVis);\r\n\r\n        var playlistItems = response.result.items;\r\n        if (playlistItems) {\r\n            $.each(playlistItems, function(index, item) {\r\n                displayResult(item.snippet);\r\n            });\r\n        } else {\r\n            $('#video-container').html('Sorry you have no uploaded videos');\r\n        }\r\n    });\r\n}\r\n\r\n// Create a listing for a video.\r\nfunction displayResult(videoSnippet) {\r\n    var title = videoSnippet.title;\r\n    var videoId = videoSnippet.resourceId.videoId;\r\n    $('#video-container').append('<p>' + title + ' - ' + videoId + '</p>');\r\n}\r\n\r\n// Retrieve the next page of videos in the playlist.\r\nfunction nextPage() {\r\n    requestVideoPlaylist(playlistId, nextPageToken);\r\n}\r\n\r\n// Retrieve the previous page of videos in the playlist.\r\nfunction previousPage() {\r\n    requestVideoPlaylist(playlistId, prevPageToken);\r\n}\r\n"]},"hash":"cf4446e331a5a05d859b2eb20a44546bba709f1a"}
